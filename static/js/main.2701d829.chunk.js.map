{"version":3,"sources":["Effects.js","Tunnel.js","App.js","index.js"],"names":["Effects","composerRef","useRef","aspect","useMemo","THREE","useThree","scene","gl","size","camera","useEffect","current","setSize","width","height","useFrame","render","ref","args","attachArray","isMobile","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","INTERIOR_ANGLE","Math","PI","LENGTH","tan","DEPTH","Tunnel","curvePoints","getPoints","slice","Rect","index","pos","order","rotation","position","x","y","color","side","lightsRef","randLightPos","randFloat","random","mainLightRef","state","i","light","children","z","distance","mouse","map","castShadow","intensity","Array","fill","decay","App","style","dpr","fov","antialias","attach","fallback","target","href","document","querySelector"],"mappings":"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","file":"static/js/main.2701d829.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, useMemo, useEffect } from 'react'\nimport { extend, useThree, useFrame } from '@react-three/fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { isMobile } from 'react-device-detect'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass })\n\nexport default function Effects() {\n    const composerRef = useRef()\n\n    const aspect = useMemo(() => new THREE.Vector2(512, 512), [])\n    const { scene, gl, size, camera } = useThree()\n\n    useEffect(() => {\n      composerRef.current.setSize(size.width, size.height)\n    }, [size])\n\n    useFrame(() => {\n      composerRef.current.render()\n    }, 1)\n\n  return (\n    <effectComposer ref={composerRef} args={[gl]} renderTarget1-type={THREE.HalfFloatType} renderTarget2-type={THREE.HalfFloatType}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 1, 1, isMobile ? 0.9308 : 0.929]} /> \n    </effectComposer>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame } from '@react-three/fiber'\n\nconst RADIUS = 60\nconst INTERIOR_ANGLE = Math.PI * 5 / 7\nconst LENGTH = 2 * RADIUS / Math.tan(INTERIOR_ANGLE * 0.5)\nconst OFFSET_ANGLE = 0.225\nconst DEPTH = 1000\nconst LIGHTS_COUNT = 5\n\nexport default function Tunnel() {\n  const curve = new THREE.EllipseCurve(\n    0, 0,  // xCenter, yCenter\n    RADIUS, RADIUS, // xRadius, yRadius\n    0, Math.PI * 2, // startAngle, endAngle\n    true,  // clockwise\n    0 // rotation\n  )\n  const curvePoints = curve.getPoints(7).slice(0, -1)\n  const Rect = ({ index, pos }) => {\n    const order = (index + 5) % 7\n    return (\n      <group rotation={[Math.PI * 0.5, -Math.PI * 2 / 7 * order - OFFSET_ANGLE, 0]} position={[pos.x, pos.y, 0]}>\n        <mesh position={[0, 0, 0.05]}> \n          <planeBufferGeometry args={[LENGTH + 5, DEPTH]}/>\n          <meshPhysicalMaterial color='#538ca3' side={THREE.DoubleSide}/>\n        </mesh>\n      </group>\n    )\n  }\n\n  const lightsRef = useRef()\n  const randLightPos = () => THREE.MathUtils.randFloat(20, 40) * (Math.random() < 0.5 ? -1 : 1)\n\n  const mainLightRef = useRef()\n\n  useFrame((state) => {\n    for (let i = 0; i < LIGHTS_COUNT; i ++) {\n      const light = lightsRef.current.children[i]\n      light.position.z += 10\n      if (light.position.z >= DEPTH * 0.5) {\n        light.position.x = randLightPos()\n        light.position.y = randLightPos()\n        light.position.z = - DEPTH * 0.5 - Math.random() * DEPTH\n        light.distance = THREE.MathUtils.randFloat(60, 130)\n      }\n    }\n\n    mainLightRef.current.position.x = state.mouse.x * -12\n    mainLightRef.current.position.y = state.mouse.x * -12\n  })\n\n  return (\n    <group rotation={[0, 0, OFFSET_ANGLE]}>\n      {curvePoints.map((pos, i) => <Rect key={i} index={i} pos={pos}/>)}\n      <pointLight ref={mainLightRef} color=\"#ebfeff\" castShadow position={[0, 0, -DEPTH]} intensity={2.6}/> \n      <group ref={lightsRef}>\n        {Array(6).fill(\n          <pointLight position={[0, 0, DEPTH]} castShadow intensity={1} distance={100} decay={2} />\n        )}\n      </group>\n    </group>\n  )\n}\n","import React, { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport Effects from './Effects'\nimport Tunnel from './Tunnel'\n\nexport default function App() {\n\n  return (\n    <>\n      <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n        <Canvas\n          dpr={[1, 2]}\n          camera={{ fov: 100, position: [0, 0, 500] }}\n          gl={{ antialias: true }}\n        >\n          <color attach=\"background\" args={['#d2fafc']} />\n          <Suspense fallback={null}>\n            <Tunnel/>\n            <Effects/>\n          </Suspense>\n        </Canvas>\n      </div>\n      <footer>\n        three.js sketch by <a target=\"_blank\" href=\"https://liamlkh.github.io/\" >liamlkh</a>\n      </footer>\n   </>\n  )\n}\n","import { render } from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nrender(<App />, document.querySelector('#root'))\n"],"sourceRoot":""}